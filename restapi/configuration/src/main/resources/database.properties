# ===============================
# = COMMON
# ===============================
datasource.platform = mariadb
datasource.driver-class-name = org.mariadb.jdbc.Driver
datasource.host = localhost
datasource.port = 3306
datasource.root.username = root
datasource.root.password =

# ===============================
# = DATA SOURCE
# ===============================
# Set here configurations for the database connection
# Initialize the datasource with available DDL and DML scripts.
spring.datasource.initialization-mode = always
spring.datasource.platform = ${datasource.platform}
spring.datasource.driver-class-name = ${datasource.driver-class-name}
spring.datasource.schema-name = musbands
spring.datasource.url = jdbc:mariadb://${datasource.host}:${datasource.port}/${spring.datasource.schema-name}
spring.datasource.jdbcUrl = ${spring.datasource.url}
spring.datasource.username = ${datasource.root.username}
spring.datasource.password = ${datasource.root.password}

# Keep the connection alive if idle for a long time (needed in production)
spring.datasource.testWhileIdle = true
spring.datasource.validationQuery = SELECT 1

# ===============================
# = ADMIN TABLE DATA SOURCE
# ===============================
# Set here configurations for the database connection
# Initialize the datasource with available DDL and DML scripts.
spring.admin-table-datasource.initialization-mode = always
spring.admin-table-datasource.platform = ${datasource.platform}
spring.admin-table-datasource.driver-class-name = ${datasource.driver-class-name}
spring.admin-table-datasource.schema-name = musbands_admin_table
spring.admin-table-datasource.url = jdbc:mariadb://${datasource.host}:${datasource.port}/${spring.admin-table-datasource.schema-name}
spring.admin-table-datasource.jdbcUrl = ${spring.admin-table-datasource.url}
spring.admin-table-datasource.username = ${datasource.root.username}
spring.admin-table-datasource.password = ${datasource.root.password}

# Keep the connection alive if idle for a long time (needed in production)
spring.admin-table-datasource.testWhileIdle = true
spring.admin-table-datasource.validationQuery = SELECT 1

# ===============================
# = USER DATA SOURCE
# ===============================
# Set here configurations for the database connection
# Initialize the datasource with available DDL and DML scripts.
spring.user-datasource.initialization-mode = always
spring.user-datasource.platform = ${datasource.platform}
spring.user-datasource.driver-class-name = ${datasource.driver-class-name}
spring.user-datasource.schema-name = musbands_user
spring.user-datasource.url = jdbc:mariadb://${datasource.host}:${datasource.port}/${spring.user-datasource.schema-name}
spring.user-datasource.jdbcUrl = ${spring.user-datasource.url}
spring.user-datasource.username = ${datasource.root.username}
spring.user-datasource.password = ${datasource.root.password}

# Keep the connection alive if idle for a long time (needed in production)
spring.user-datasource.testWhileIdle = true
spring.user-datasource.validationQuery = SELECT 1

# ===============================
# = JPA / HIBERNATE
# ===============================
# Show or not log for each sql query
spring.jpa.show-sql = true
spring.jpa.properties.hibernate.format_sql = true
spring.jpa.database = default
spring.h2.console.enabled = true
# Hibernate ddl auto (create, create-drop, update): with "create-drop" the database
# schema will be automatically created afresh for every start of application
spring.jpa.hibernate.ddl-auto = create
# Naming strategy
spring.jpa.hibernate.naming.implicit-strategy = org.hibernate.boot.model.naming.ImplicitNamingStrategyLegacyHbmImpl
spring.jpa.hibernate.naming.physical-strategy = org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl
# Allows Hibernate to generate SQL optimized for a particular DBMS
spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.MariaDB53Dialect
